final 키워드는 사전상 '마지막의', '최종적인' 정도로
변수, 메서드, 클래스에 사용이 가능한데 -> 더이상 '재할당'할 수 없게 되며, 해당 메서드의 경우는 '오버라이드'될 수 없고
클래스의 경우는 '상속' 할 수 없는 클래스가 된다.

ex) final int number = 1;
number = 2; // Cannot assign a value to final variable 'number' 에러 발생

상수의 경우는 접근제어자 private 또는 public과 같이 사용하여 static을 사용하면 컴파일 타임에 메모리 할당을 단 한번 하기 때문에 효율성이 좋다.
private static final int MOVE_STEP = 1;

class Car {
    private final int position;

    Car() {
        this.position = 0;
    }
}
생성자 초기화 또환 가능하며
메소드 내부에서 인자를 변경할 수 없도록 해줄수도 있다.
void someMethod(final int number) {
    number = 3;
    // Cannot assign a value to final variable 'number'
}

### 중요

위의 예시를 통해서 final 키워드를 사용하면 할당된 값이 절대 변경되지 않을 것 같지만 '완벽한 불변성을 의미하지 않는다.'
-> '재할당'만을 막아줄 뿐, '참조'하고있는 객체 내부의 상태가 변하지 않았음을 보장해주지는 않는다.

final List<Integer> numbers = new ArrayList<>(Arrays.asList(1, 2, 3));
System.out.println(numbers); // [1, 2, 3]
numbers.add(4);
System.out.println(numbers); // [1, 2, 3, 4]

위와 같이 final 키워드가 사용이 되었지만 내부의 값이 변경되는 것을 확인할 수 있다
-> final 키워드는 불변성을 지킬때 사용하지만 final '단독으로는' 완변히 불변성을 지킬 수는 없다.

