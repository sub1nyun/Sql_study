1. MyBatis란 자바 언어를 위한 간편한 데이터베이스 접근 라이브러리로서
  - 상호작용을 단순화하고, SQL 쿼리를 관리하는데 도움을 주는 프레임워크

2. "#"과 "$"의 차이
  - 데이터를 바인딩하는 방식에 차이가 있음
  - #의 경우
    - SQL 파라미터 값을 자동으로 바인딩 하는 용도로 사용함
    - ex) #{name}과 같이 사용하면 자동으로 해당 파라미터 값을 SQL 문에 삽입 -> 인젝션 보안 문제 예방 -> soft parsing
  - $의 경우
    - SQL 파라미터 값을 문자열로 대입하는 용도로 사용함
    - 동적으로 SQL 문을 생성할 때 유용 -> 인젝션 보안에 취약 -> hard parsing

3. soft parsing과 hard parsing
  - soft parsing => 캐시 영역에서 쿼리 실행 계획을 바로 가져와서 실행하는 것
  - hard parsing => 옵티마이저가 일련의 과정을 거쳐 실행 계획 수립하는 것

4. SQL 실행의 이해 (오라클 기준)
  - 개발자가 쿼리문을 전달
  - 내부적으로 파싱 작업 -> SQL 엔진이 해석 가능한 언어로 변경
    - syntax에러 (문법 체크)
    - permission (권한 체크)
  - cache 영역 - SQL을 일전에 실행한 적이 있다면 -> 쿼리 실행 계획을 바로 가져와서 실행함 -> soft parsing
  - 캐시 영역에 없다면 옵티마이저가 드라이빙 테이블을 지정 및 조인 등등.. 최적의 실행계획을 도출해냄 -> hard 
  - tip SQL 쿼리문 자체를 '키' 값으로 보기때문에 sql이 달라지면 새로운 SQL을 생성하게 됨

5. "#" 기호를 이용하여 데이터를 바인딩하면 soft parsing이 가능한 이유
  - select * from table where id = #{id} 라고 한다면
  - 'A' 또는 'B' ... 이 들어오게 되더라도 기존에 사용했던 '키'가 있기때문에 -> (바인드 변수) 파라미터만 바뀜 -> soft parsing이 가능함

6. MySQL에서 테이블끼리 join 할때는 옵티마이저가 알고리즘을 통하여 join
  - Nested Loop Join (중첩 루프 조인):
    가장 간단한 조인 방법으로, 한 테이블의 각 레코드를 다른 테이블의 모든 레코드와 비교합니다.
    테이블 크기가 작고 인덱스가 적절하게 설정된 경우에 효율적입니다.

  - Sort Merge Join (정렬 병합 조인):
    조인할 두 테이블을 각각 정렬한 후, 정렬된 결과를 비교하여 조인을 수행합니다.
    조인 조건에 인덱스가 사용되지 않는 경우에 주로 선택됩니다.

  - Hash Join (해시 조인):
    조인하는 두 테이블 중 작은 테이블을 해시 테이블로 변환한 후, 다른 테이블의 레코드를 해시 테이블과 비교하여 조인을 수행합니다.
    작은 테이블을 해시 테이블로 변환하므로, 큰 테이블과 작은 테이블 중에서 크기가 작은 테이블이 hash join에 사용되는 경우 효율적입니다.
  - 옵티마이저가 어떠한 알고리즘으로 join을 하였는지는 실행 계획을 통해서 알 수 있음
    조인 알고리즘에 대한 정보는 "type" 컬럼에서 확인할 수 있습니다.
    "Nested Loop" : Nested Loop Join (중첩 루프 조인)
    "Merge" : Sort Merge Join (정렬 병합 조인)
    "Hash" : Hash Join (해시 조인)

